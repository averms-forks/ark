---
title: FAQ
meta_title: Ivy &mdash; FAQ
---

[1]: http://www.dmulholl.com/demos/ivy/
[2]: http://www.dmulholl.com/demos/holly/
[3]: https://pypi.org/project/Markdown/
[4]: https://github.com/dmulholl/ivy-katex-demo
[5]: https://katex.org

::: insert toc



### Is Ivy fast?

No. Ivy is designed to be easy to use, with lots of flexibility under the hood if you're prepared to write a little extension code. Execution speed isn't a significant design goal as it's simply irrelevant for the kind of small personal or project websites Ivy is intended to be used for.

As a rough benchmark, a clean (no-cache) build of the Ivy [demo site][1] which contains 7 output pages takes 0.15 seconds on my laptop.
A clean build of the Holly [demo site][2] which contains 951 output pages takes 1.7 seconds.
This means that on my particular hardware I can expect a throughput of roughly 500 pages per second.

If you need to build a website with tens or hundreds of thousands of pages, Ivy probably isn't the right tool for you.
[Hugo](https://gohugo.io) is a popular static site generator with a focus on execution speed that may be a better match for large sites.



### Can I build a blog using Ivy?

[Holly](https://github.com/dmulholl/holly) is a blog-engine plugin for Ivy. It adds support for WordPress-style post and tag indexes.



### Where do I put my image files?

Image files, along with any other static assets, should be stored in the site's resources directory, `res`. The content of this directory is copied to the output directory when the site is built.

As an example, assume we have a file named `photo.jpg` stored in a directory named `images` within the `res` directory, i.e.

    site/
    |-- res/
        |-- images/
            |-- photo.jpg

This file will be copied to the output directory and can be accessed in templates and node files via the URL:

    @root/images/photo.jpg



### Does Ivy support featured images or image galleries?

Ivy has no special support for WordPress-style featured images but we can implement similar functionality simply by adding the image name as an attribute to the page header, e.g.

::: code yaml
    ---
    title: Page Title
    image: photo.jpg
    ---

We can then check for the presence of a featured image in the appropriate template file:

::: code django
    {% if node.image %}
        <img src="@root/images/{{node.image}}">
    {% endif %}

Yaml supports lists so we can implement galleries in a similar manner by adding a list of image names to the header and then iterating over the list in the template file:

::: code django
    {% for image in node.gallery %}
        <img src="@root/images/{{image}}">
    {% endfor %}



### Why do I get an error when I add a URL to a Yaml header?

Yaml doesn't support unquoted values that begin with an `@` symbol so you'll get an error message if you add a bare `@root/` URL to a Yaml header, e.g.

    ---
    image: @root/images/photo.jpg
    ---

Quoting the URL solves the problem:

    ---
    image: "@root/images/photo.jpg"
    ---



### How do I deploy a site built with Ivy?

One of the nicest things about a static website is that it's completely independent of the tool used to build it. You can host your website anywhere you like --- in the simplest case you can 'deploy' it simply by double-clicking on the .html files to view them locally in your browser.

To make your website available on the public internet you have lots of options. Here's some of the most common, in order of increasing difficulty and expense.

(*) The simplest option to get started is to use a service like [Github Pages](https://pages.github.com) which will host static websites for free.

(*) The next step up is 'shared web hosting' --- it's cheap, flexible, and lots of online companies offer it. I've used [NearlyFreeSpeech](https://www.nearlyfreespeech.net) myself and been happy with their service.

(*) If you need more control over your hosting environment you can run your own webserver (typically Apache or Nginx) on a virtual server machine (a VPS or Virtual Private Server) you rent from a company like [Digital Ocean](https://www.digitalocean.com).



### Why is it called Ivy?

I liked the name Industrial Vellum, IV. Also, the branching tree structure of the nodes reminded me of ivy.



### How do I specify a custom file extension?

You can specify a custom file extension for output files in your site configuration file, e.g.

::: code python
    extension = ".htm"



### How do I generate directory-style URLs?

You can tell Ivy to generate directory-style URLs --- i.e. URLs ending in a forward slash `/` --- by setting a custom file extension of `/` in your site configuration file:

::: code python
    extension = "/"



### How do I generate absolute or site-relative URLs?

You can tell Ivy to generate absolute URLs by specifying an explicit root domain in your site configuration file, e.g.

::: code python
    root = "http://example.com/"

Specify a single forward slash to generate site-relative URLs --- i.e. URLs that begin with `/`:

::: code python
    root = "/"



### How do I disable a node?

You can add a `disable` flag to a node's metadata header:

    ---
    disable: true
    ---

This will stop Ivy from producing an output HTML page for the node.

Note that this only affects the node itself, not its children.



### Can I use a different Markdown library?

Sure. Ivy defaults to using the [Markdown][3] library to render `.md` files but you can [register a custom handler](@root/extensions//#rendering-engines) to use any library you like.



### Can I use LaTeX markup?

Here's a [simple demo][4] of an Ivy site using the [KaTeX][5] JavaScript library to render LaTeX markup.
